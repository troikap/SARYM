var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var QRScannerOriginal = /** @class */ (function (_super) {
    __extends(QRScannerOriginal, _super);
    function QRScannerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QRScannerOriginal.prototype.prepare = function () { return cordova(this, "prepare", { "callbackStyle": "node" }, arguments); };
    QRScannerOriginal.prototype.scan = function () { return cordova(this, "scan", { "callbackStyle": "node", "observable": true, "clearFunction": "cancelScan" }, arguments); };
    QRScannerOriginal.prototype.show = function () { return cordova(this, "show", {}, arguments); };
    QRScannerOriginal.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    QRScannerOriginal.prototype.enableLight = function () { return cordova(this, "enableLight", { "callbackStyle": "node" }, arguments); };
    QRScannerOriginal.prototype.destroy = function () { return cordova(this, "destroy", {}, arguments); };
    QRScannerOriginal.prototype.disableLight = function () { return cordova(this, "disableLight", { "callbackStyle": "node" }, arguments); };
    QRScannerOriginal.prototype.useFrontCamera = function () { return cordova(this, "useFrontCamera", { "callbackStyle": "node" }, arguments); };
    QRScannerOriginal.prototype.useBackCamera = function () { return cordova(this, "useBackCamera", { "callbackStyle": "node" }, arguments); };
    QRScannerOriginal.prototype.useCamera = function (camera) { return cordova(this, "useCamera", { "callbackStyle": "node" }, arguments); };
    QRScannerOriginal.prototype.pausePreview = function () { return cordova(this, "pausePreview", {}, arguments); };
    QRScannerOriginal.prototype.resumePreview = function () { return cordova(this, "resumePreview", {}, arguments); };
    QRScannerOriginal.prototype.getStatus = function () { return cordova(this, "getStatus", {}, arguments); };
    QRScannerOriginal.prototype.openSettings = function () { return cordova(this, "openSettings", { "sync": true }, arguments); };
    QRScannerOriginal.pluginName = "QRScanner";
    QRScannerOriginal.plugin = "cordova-plugin-qrscanner";
    QRScannerOriginal.pluginRef = "QRScanner";
    QRScannerOriginal.repo = "https://github.com/bitpay/cordova-plugin-qrscanner";
    QRScannerOriginal.platforms = ["Android", "Browser", "iOS", "Windows"];
    return QRScannerOriginal;
}(IonicNativePlugin));
var QRScanner = new QRScannerOriginal();
export { QRScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3FyLXNjYW5uZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFnSEgsNkJBQWlCOzs7O0lBUTlDLDJCQUFPO0lBYVAsd0JBQUk7SUFTSix3QkFBSTtJQVNKLHdCQUFJO0lBV0osK0JBQVc7SUFTWCwyQkFBTztJQVdQLGdDQUFZO0lBV1osa0NBQWM7SUFXZCxpQ0FBYTtJQVliLDZCQUFTLGFBQUMsTUFBYztJQVN4QixnQ0FBWTtJQVNaLGlDQUFhO0lBU2IsNkJBQVM7SUFVVCxnQ0FBWTs7Ozs7O29CQS9QZDtFQWtIK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBRUlNjYW5uZXJTdGF0dXMge1xuICAvKipcbiAgICogT24gaU9TIGFuZCBBbmRyb2lkIDYuMCssIGNhbWVyYSBhY2Nlc3MgaXMgZ3JhbnRlZCBhdCBydW50aW1lIGJ5IHRoZSB1c2VyIChieSBjbGlja2luZyBcIkFsbG93XCIgYXQgdGhlIGRpYWxvZykuXG4gICAqIFRoZSBhdXRob3JpemVkIHByb3BlcnR5IGlzIGEgYm9vbGVhbiB2YWx1ZSB3aGljaCBpcyB0cnVlIG9ubHkgd2hlbiB0aGUgdXNlciBoYXMgYWxsb3dlZCBjYW1lcmEgYWNjZXNzIHRvIHlvdXIgYXBwIChBVkF1dGhvcml6YXRpb25TdGF0dXMuQXV0aG9yaXplZCkuXG4gICAqIE9uIHBsYXRmb3JtcyB3aXRoIHBlcm1pc3Npb25zIGdyYW50ZWQgYXQgaW5zdGFsbCAoQW5kcm9pZCBwcmUtNi4wLCBXaW5kb3dzIFBob25lKSB0aGlzIHByb3BlcnR5IGlzIGFsd2F5cyB0cnVlLlxuICAgKi9cbiAgYXV0aG9yaXplZDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEEgYm9vbGVhbiB2YWx1ZSB3aGljaCBpcyB0cnVlIGlmIHRoZSB1c2VyIHBlcm1hbmVudGx5IGRlbmllZCBjYW1lcmEgYWNjZXNzIHRvIHRoZSBhcHAgKEFWQXV0aG9yaXphdGlvblN0YXR1cy5EZW5pZWQpLlxuICAgKiBPbmNlIGRlbmllZCwgY2FtZXJhIGFjY2VzcyBjYW4gb25seSBiZSBnYWluZWQgYnkgcmVxdWVzdGluZyB0aGUgdXNlciBjaGFuZ2UgdGhlaXIgZGVjaXNpb24gKGNvbnNpZGVyIG9mZmVyaW5nIGEgbGluayB0byB0aGUgc2V0dGluZyB2aWEgb3BlblNldHRpbmdzKCkpLlxuICAgKi9cbiAgZGVuaWVkOiBib29sZWFuO1xuICAvKipcbiAgICogQSBib29sZWFuIHZhbHVlIHdoaWNoIGlzIHRydWUgaWYgdGhlIHVzZXIgaXMgdW5hYmxlIHRvIGdyYW50IHBlcm1pc3Npb25zIGR1ZSB0byBwYXJlbnRhbCBjb250cm9scywgb3JnYW5pemF0aW9uIHNlY3VyaXR5IGNvbmZpZ3VyYXRpb24gcHJvZmlsZXMsIG9yIHNpbWlsYXIgcmVhc29ucy5cbiAgICovXG4gIHJlc3RyaWN0ZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gdmFsdWUgd2hpY2ggaXMgdHJ1ZSBpZiBRUlNjYW5uZXIgaXMgcHJlcGFyZWQgdG8gY2FwdHVyZSB2aWRlbyBhbmQgcmVuZGVyIGl0IHRvIHRoZSB2aWV3LlxuICAgKi9cbiAgcHJlcGFyZWQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gdmFsdWUgd2hpY2ggaXMgdHJ1ZSB3aGVuIHRoZSBwcmV2aWV3IGxheWVyIGlzIHZpc2libGUgKGFuZCBvbiBhbGwgcGxhdGZvcm1zIGJ1dCBicm93c2VyLCB0aGUgbmF0aXZlIHdlYnZpZXcgYmFja2dyb3VuZCBpcyB0cmFuc3BhcmVudCkuXG4gICAqL1xuICBzaG93aW5nOiBib29sZWFuO1xuICAvKipcbiAgICogQSBib29sZWFuIHZhbHVlIHdoaWNoIGlzIHRydWUgaWYgUVJTY2FubmVyIGlzIGFjdGl2ZWx5IHNjYW5uaW5nIGZvciBhIFFSIGNvZGUuXG4gICAqL1xuICBzY2FubmluZzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEEgYm9vbGVhbiB2YWx1ZSB3aGljaCBpcyB0cnVlIGlmIFFSU2Nhbm5lciBpcyBkaXNwbGF5aW5nIGEgbGl2ZSBwcmV2aWV3IGZyb20gdGhlIGRldmljZSdzIGNhbWVyYS4gU2V0IHRvIGZhbHNlIHdoZW4gdGhlIHByZXZpZXcgaXMgcGF1c2VkLlxuICAgKi9cbiAgcHJldmlld2luZzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEEgYm9vbGVhbiB2YWx1ZSB3aGljaCBpcyB0cnVlIGlmIHRoZSBsaWdodCBpcyBlbmFibGVkLlxuICAgKi9cbiAgbGlnaHRFbmFibGVkOiBib29sZWFuO1xuICAvKipcbiAgICogQSBib29sZWFuIHZhbHVlIHdoaWNoIGlzIHRydWUgb25seSBpZiB0aGUgdXNlcnMnIG9wZXJhdGluZyBzeXN0ZW0gaXMgYWJsZSB0byBRUlNjYW5uZXIub3BlblNldHRpbmdzKCkuXG4gICAqL1xuICBjYW5PcGVuU2V0dGluZ3M6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gdmFsdWUgd2hpY2ggaXMgdHJ1ZSBvbmx5IGlmIHRoZSB1c2VycycgZGV2aWNlIGNhbiBlbmFibGUgYSBsaWdodCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBjdXJyZW50Q2FtZXJhLlxuICAgKi9cbiAgY2FuRW5hYmxlTGlnaHQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gdmFsdWUgd2hpY2ggaXMgdHJ1ZSBvbmx5IGlmIHRoZSBjdXJyZW50IGRldmljZSBcInNob3VsZFwiIGhhdmUgYSBmcm9udCBjYW1lcmEuXG4gICAqIFRoZSBjYW1lcmEgbWF5IHN0aWxsIG5vdCBiZSBjYXB0dXJhYmxlLCB3aGljaCB3b3VsZCBlbWl0IGVycm9yIGNvZGUgMywgNCwgb3IgNSB3aGVuIHRoZSBzd2l0Y2ggaXMgYXR0ZW1wdGVkLlxuICAgKiAoT24gdGhlIGJyb3dzZXIgcGxhdGZvcm0sIHRoaXMgdmFsdWUgaXMgZmFsc2UgdW50aWwgdGhlIHByZXBhcmUgbWV0aG9kIGlzIGNhbGxlZC4pXG4gICAqL1xuICBjYW5DaGFuZ2VDYW1lcmE6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50Q2FtZXJhLiAwIGlzIHRoZSBiYWNrIGNhbWVyYSwgMSBpcyB0aGUgZnJvbnQuXG4gICAqL1xuICBjdXJyZW50Q2FtZXJhOiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgUVIgU2Nhbm5lclxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZhc3QsIGVuZXJneSBlZmZpY2llbnQsIGhpZ2hseS1jb25maWd1cmFibGUgUVIgY29kZSBzY2FubmVyIGZvciBDb3Jkb3ZhIGFwcHMuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1xcnNjYW5uZXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbUVIgU2Nhbm5lciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2JpdHBheS9jb3Jkb3ZhLXBsdWdpbi1xcnNjYW5uZXIpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUVJTY2FubmVyLCBRUlNjYW5uZXJTdGF0dXMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3FyLXNjYW5uZXIvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBxclNjYW5uZXI6IFFSU2Nhbm5lcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gT3B0aW9uYWxseSByZXF1ZXN0IHRoZSBwZXJtaXNzaW9uIGVhcmx5XG4gKiB0aGlzLnFyU2Nhbm5lci5wcmVwYXJlKClcbiAqICAgLnRoZW4oKHN0YXR1czogUVJTY2FubmVyU3RhdHVzKSA9PiB7XG4gKiAgICAgIGlmIChzdGF0dXMuYXV0aG9yaXplZCkge1xuICogICAgICAgIC8vIGNhbWVyYSBwZXJtaXNzaW9uIHdhcyBncmFudGVkXG4gKlxuICpcbiAqICAgICAgICAvLyBzdGFydCBzY2FubmluZ1xuICogICAgICAgIGxldCBzY2FuU3ViID0gdGhpcy5xclNjYW5uZXIuc2NhbigpLnN1YnNjcmliZSgodGV4dDogc3RyaW5nKSA9PiB7XG4gKiAgICAgICAgICBjb25zb2xlLmxvZygnU2Nhbm5lZCBzb21ldGhpbmcnLCB0ZXh0KTtcbiAqXG4gKiAgICAgICAgICB0aGlzLnFyU2Nhbm5lci5oaWRlKCk7IC8vIGhpZGUgY2FtZXJhIHByZXZpZXdcbiAqICAgICAgICAgIHNjYW5TdWIudW5zdWJzY3JpYmUoKTsgLy8gc3RvcCBzY2FubmluZ1xuICogICAgICAgIH0pO1xuICpcbiAqICAgICAgfSBlbHNlIGlmIChzdGF0dXMuZGVuaWVkKSB7XG4gKiAgICAgICAgLy8gY2FtZXJhIHBlcm1pc3Npb24gd2FzIHBlcm1hbmVudGx5IGRlbmllZFxuICogICAgICAgIC8vIHlvdSBtdXN0IHVzZSBRUlNjYW5uZXIub3BlblNldHRpbmdzKCkgbWV0aG9kIHRvIGd1aWRlIHRoZSB1c2VyIHRvIHRoZSBzZXR0aW5ncyBwYWdlXG4gKiAgICAgICAgLy8gdGhlbiB0aGV5IGNhbiBncmFudCB0aGUgcGVybWlzc2lvbiBmcm9tIHRoZXJlXG4gKiAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgLy8gcGVybWlzc2lvbiB3YXMgZGVuaWVkLCBidXQgbm90IHBlcm1hbmVudGx5LiBZb3UgY2FuIGFzayBmb3IgcGVybWlzc2lvbiBhZ2FpbiBhdCBhIGxhdGVyIHRpbWUuXG4gKiAgICAgIH1cbiAqICAgfSlcbiAqICAgLmNhdGNoKChlOiBhbnkpID0+IGNvbnNvbGUubG9nKCdFcnJvciBpcycsIGUpKTtcbiAqXG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogUVJTY2FubmVyU3RhdHVzXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUVJTY2FubmVyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcXJzY2FubmVyJyxcbiAgcGx1Z2luUmVmOiAnUVJTY2FubmVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9iaXRwYXkvY29yZG92YS1wbHVnaW4tcXJzY2FubmVyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFFSU2Nhbm5lciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFJlcXVlc3QgcGVybWlzc2lvbiB0byB1c2UgUVIgc2Nhbm5lci5cbiAgICogQHJldHVybiB7UHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdub2RlJ1xuICB9KVxuICBwcmVwYXJlKCk6IFByb21pc2U8UVJTY2FubmVyU3RhdHVzPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZW5hYmxlIHNjYW5uaW5nLiBZb3UgbXVzdCB0aGVuIGNhbGwgdGhlIGBzaG93YCBtZXRob2QgdG8gbWFrZSB0aGUgY2FtZXJhIHByZXZpZXcgdmlzaWJsZS5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxzdHJpbmc+fSByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgc2Nhbm5lZCB0ZXh0LiBVbnN1YnNjcmliZSBmcm9tIHRoZSBvYnNlcnZhYmxlIHRvIHN0b3Agc2Nhbm5pbmcuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tTdHlsZTogJ25vZGUnLFxuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ2NhbmNlbFNjYW4nXG4gIH0pXG4gIHNjYW4oKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgbmF0aXZlIHdlYnZpZXcgdG8gaGF2ZSBhIHRyYW5zcGFyZW50IGJhY2tncm91bmQsIHRoZW4gc2V0cyB0aGUgYmFja2dyb3VuZCBvZiB0aGUgPGJvZHk+IGFuZCA8aHRtbD4gRE9NIGVsZW1lbnRzIHRvIHRyYW5zcGFyZW50LCBhbGxvd2luZyB0aGUgd2VidmlldyB0byByZS1yZW5kZXIgd2l0aCB0aGUgdHJhbnNwYXJlbnQgYmFja2dyb3VuZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8UVJTY2FubmVyU3RhdHVzPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hvdygpOiBQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBuYXRpdmUgd2VidmlldyB0byBiZSBvcGFxdWUgd2l0aCBhIHdoaXRlIGJhY2tncm91bmQsIGNvdmVyaW5nIHRoZSB2aWRlbyBwcmV2aWV3LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBoaWRlKCk6IFByb21pc2U8UVJTY2FubmVyU3RhdHVzPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgZGV2aWNlJ3MgbGlnaHQgKGZvciBzY2FubmluZyBpbiBsb3ctbGlnaHQgZW52aXJvbm1lbnRzKS5cbiAgICogQHJldHVybnMge1Byb21pc2U8UVJTY2FubmVyU3RhdHVzPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnbm9kZSdcbiAgfSlcbiAgZW5hYmxlTGlnaHQoKTogUHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSB0aGUgc2Nhbm5lciBpbnN0YW5jZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8UVJTY2FubmVyU3RhdHVzPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVzdHJveSgpOiBQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBkZXZpY2UncyBsaWdodC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdub2RlJ1xuICB9KVxuICBkaXNhYmxlTGlnaHQoKTogUHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXNlIGZyb250IGNhbWVyYVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tTdHlsZTogJ25vZGUnXG4gIH0pXG4gIHVzZUZyb250Q2FtZXJhKCk6IFByb21pc2U8UVJTY2FubmVyU3RhdHVzPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZSBiYWNrIGNhbWVyYVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tTdHlsZTogJ25vZGUnXG4gIH0pXG4gIHVzZUJhY2tDYW1lcmEoKTogUHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNhbWVyYSB0byBiZSB1c2VkLlxuICAgKiBAcGFyYW0gY2FtZXJhIHtudW1iZXJ9IFByb3ZpZGUgYDBgIGZvciBiYWNrIGNhbWVyYSwgYW5kIGAxYCBmb3IgZnJvbnQgY2FtZXJhLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tTdHlsZTogJ25vZGUnXG4gIH0pXG4gIHVzZUNhbWVyYShjYW1lcmE6IG51bWJlcik6IFByb21pc2U8UVJTY2FubmVyU3RhdHVzPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlcyB0aGUgdmlkZW8gcHJldmlldyBvbiB0aGUgY3VycmVudCBmcmFtZSBhbmQgcGF1c2VzIHNjYW5uaW5nLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHBhdXNlUHJldmlldygpOiBQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN1bXNlIHRoZSB2aWRlbyBwcmV2aWV3IGFuZCByZXN1bWVzIHNjYW5uaW5nLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc3VtZVByZXZpZXcoKTogUHJvbWlzZTxRUlNjYW5uZXJTdGF0dXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBwZXJtaXNzaW9uIHN0YXR1c1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFN0YXR1cygpOiBQcm9taXNlPFFSU2Nhbm5lclN0YXR1cz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBzZXR0aW5ncyB0byBlZGl0IGFwcCBwZXJtaXNzaW9ucy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIG9wZW5TZXR0aW5ncygpOiB2b2lkIHt9XG59XG4iXX0=